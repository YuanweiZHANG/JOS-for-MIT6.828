/* See COPYRIGHT for copyright information. */

#include <inc/mmu.h>
#include <inc/memlayout.h>
#include <inc/trap.h>



###################################################################
# exceptions/interrupts
###################################################################

/* TRAPHANDLER defines a globally-visible function for handling a trap.
 * It pushes a trap number onto the stack, then jumps to _alltraps.
 * Use TRAPHANDLER for traps where the CPU automatically pushes an error code.
 *
 * You shouldn't call a TRAPHANDLER function from C, but you may
 * need to _declare_ one in C (for instance, to get a function pointer
 * during IDT setup).  You can declare the function with
 *   void NAME();
 * where NAME is the argument passed to TRAPHANDLER.
 */
#define TRAPHANDLER(name, num)						\
	.globl name;		/* define global symbol for 'name' */	\
	.type name, @function;	/* symbol type is function */		\
	.align 2;		/* align function definition */		\
	name:			/* function starts here */		\
	pushl $(num);							\
	jmp _alltraps

/* Use TRAPHANDLER_NOEC for traps where the CPU doesn't push an error code.
 * It pushes a 0 in place of the error code, so the trap frame has the same
 * format in either case.
 */
#define TRAPHANDLER_NOEC(name, num)					\
	.globl name;							\
	.type name, @function;						\
	.align 2;							\
	name:								\
	pushl $0;							\
	pushl $(num);							\
	jmp _alltraps

.text

/*
 * Lab 3: Your code here for generating entry points for the different traps.
 */
TRAPHANDLER_NOEC(divide_error, T_DIVIDE)
TRAPHANDLER_NOEC(debug_exception, T_DEBUG)
TRAPHANDLER_NOEC(nmi, T_NMI)
TRAPHANDLER_NOEC(breakpoint, T_BRKPT)
TRAPHANDLER_NOEC(overflow, T_OFLOW)
TRAPHANDLER_NOEC(bounds_check, T_BOUND)
TRAPHANDLER_NOEC(illegal_opcode, T_ILLOP)
TRAPHANDLER_NOEC(device_not_available, T_DEVICE)
TRAPHANDLER(double_fault, T_DBLFLT)
TRAPHANDLER_NOEC(coproc, 9)    # reserved (not generated by recent processors)
TRAPHANDLER(invalid_tss, T_TSS)
TRAPHANDLER(segment_not_present, T_SEGNP)
TRAPHANDLER(stack_exception, T_STACK)
TRAPHANDLER(general_protection_fault, T_GPFLT)
TRAPHANDLER(page_fault, T_PGFLT)
TRAPHANDLER_NOEC(reserved, 15) # reserved
TRAPHANDLER_NOEC(floating_point_error, T_FPERR)
TRAPHANDLER_NOEC(aligment_check, T_ALIGN)
TRAPHANDLER_NOEC(machine_check, T_MCHK)
TRAPHANDLER_NOEC(SIMD_floating_point_error, T_SIMDERR)
TRAPHANDLER_NOEC(system_call, T_SYSCALL)

# vector table (This is inspired by xv6)
.data
.globl vectors
vectors:
.long divide_error
.long debug_exception
.long nmi
.long breakpoint
.long overflow
.long bounds_check
.long illegal_opcode
.long device_not_available
.long double_fault
.long coproc
.long invalid_tss
.long segment_not_present
.long stack_exception
.long general_protection_fault
.long page_fault
.long reserved
.long floating_point_error
.long aligment_check
.long machine_check
.long SIMD_floating_point_error
.fill 28, 4, 0  # Cautious: 28!
.long system_call


/*
 * Lab 3: Your code here for _alltraps
 */
_alltraps:
	push %ds
	push %es      # Cautious: DO NOT forget store %ds and %es
	pushal
	movw $GD_KD, %ax
	movw %ax, %ds
	movw %ax, %es # Cautious: if use movw $GD_KD, %ds/%es, wrong
	pushl %esp
	call trap